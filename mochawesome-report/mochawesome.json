{
  "stats": {
    "suites": 5,
    "tests": 28,
    "passes": 28,
    "pending": 0,
    "failures": 0,
    "start": "2019-11-16T10:54:57.221Z",
    "end": "2019-11-16T10:55:10.236Z",
    "duration": 13015,
    "testsRegistered": 28,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "932f5a94-9f51-4abd-8d7e-ba9f9d61214b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1f50863f-4f02-49d1-8976-d078b43a6d78",
          "title": "Cancel order",
          "fullFile": "D:\\workspaceVScode\\RestfulAPITestProject\\test\\testScripts\\cancelOrder.spec.js",
          "file": "\\test\\testScripts\\cancelOrder.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Cancel order \"before each\" hook",
              "timedOut": false,
              "duration": 366,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let numberOfStops = 3;\nlet jsonData = await utilHelper.generateOrderPayload(numberOfStops);\nvar res = await testHelper.placeOrder(jsonData);\norderId = res.body.id;",
              "err": {},
              "uuid": "48165775-5e6f-4952-9fb7-d8bb84d9bf96",
              "parentUUID": "1f50863f-4f02-49d1-8976-d078b43a6d78",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should cancel order from assigning status with valid order id",
              "fullTitle": "Cancel order should cancel order from assigning status with valid order id",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var res = await testHelper.cancelOrder(orderId);\n//verification for status code\nexpect(res.status).to.equal(200);\n//status validation from response\nexpect(res.body.status).to.equal(prop.status_canceled);\n//verify json schema            \nexpect(res.body).to.be.jsonSchema(jsonSchema.jsonCancelOrder);",
              "err": {},
              "uuid": "cf4928df-a116-4ad5-aa14-e67feee378f6",
              "parentUUID": "1f50863f-4f02-49d1-8976-d078b43a6d78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should cancel order from ongoing status with valid order id",
              "fullTitle": "Cancel order should cancel order from ongoing status with valid order id",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await testHelper.takeOrder(orderId);\nvar res = await testHelper.cancelOrder(orderId);\n//verification for status code\nexpect(res.status).to.equal(200);\n//status validation from response\nexpect(res.body.status).to.equal(prop.status_canceled);\n//verify json schema            \nexpect(res.body).to.be.jsonSchema(jsonSchema.jsonCancelOrder);",
              "err": {},
              "uuid": "71af3cd0-9df0-4d8e-baca-df8d31d0ded3",
              "parentUUID": "1f50863f-4f02-49d1-8976-d078b43a6d78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should give an error when canceling the same order that is already in completed state",
              "fullTitle": "Cancel order should give an error when canceling the same order that is already in completed state",
              "timedOut": false,
              "duration": 40,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await testHelper.takeOrder(orderId);\nawait testHelper.completeOrder(orderId);\nvar res = await testHelper.cancelOrder(orderId);\n//verification for status code\nexpect(res.status).to.equal(422);\n//verification for message\nexpect(res.response.text).to.contain(prop.error_422_statusAlreadyCompleted);",
              "err": {},
              "uuid": "3e914655-f13b-40fd-aa38-5760341c10fe",
              "parentUUID": "1f50863f-4f02-49d1-8976-d078b43a6d78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should give an error when passing invalid order id",
              "fullTitle": "Cancel order should give an error when passing invalid order id",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var res = await testHelper.cancelOrder(orderId + 100);\n//verification for status code\nexpect(res.status).to.equal(404);\n//verification for message\nexpect(res.response.text).to.contain(prop.error_404_orderNotFound);",
              "err": {},
              "uuid": "5ef31596-49ce-410d-8dcf-09783750d617",
              "parentUUID": "1f50863f-4f02-49d1-8976-d078b43a6d78",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cf4928df-a116-4ad5-aa14-e67feee378f6",
            "71af3cd0-9df0-4d8e-baca-df8d31d0ded3",
            "3e914655-f13b-40fd-aa38-5760341c10fe",
            "5ef31596-49ce-410d-8dcf-09783750d617"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 88,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "c886f003-5456-4a90-9aae-3559d2d0ee3b",
          "title": "Complete order",
          "fullFile": "D:\\workspaceVScode\\RestfulAPITestProject\\test\\testScripts\\completeOrder.spec.js",
          "file": "\\test\\testScripts\\completeOrder.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Complete order \"before each\" hook",
              "timedOut": false,
              "duration": 280,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let numberOfStops = 3;\nlet jsonData = await utilHelper.generateOrderPayload(numberOfStops);\nvar res = await testHelper.placeOrder(jsonData);\norderId = res.body.id;",
              "err": {},
              "uuid": "df2c4385-6459-4fb1-8647-ce2a0c51f222",
              "parentUUID": "c886f003-5456-4a90-9aae-3559d2d0ee3b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should complete the order from ongoing status with vaild order id",
              "fullTitle": "Complete order should complete the order from ongoing status with vaild order id",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await testHelper.takeOrder(orderId);\nvar res = await testHelper.completeOrder(orderId);\n//verification for status code\nexpect(res.status).to.equal(200);\n//verification for message\nexpect(res.body.status).to.equal(prop.status_completed);\n//verify json schema            \nexpect(res.body).to.be.jsonSchema(jsonSchema.jsonCompleteOrder);",
              "err": {},
              "uuid": "e0abe60d-816c-4dbb-9c0d-fbecff3f6b53",
              "parentUUID": "c886f003-5456-4a90-9aae-3559d2d0ee3b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should give an error when status is not on going, current status: Assigning",
              "fullTitle": "Complete order should give an error when status is not on going, current status: Assigning",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var res = await testHelper.completeOrder(orderId);\n//verification for status code\nexpect(res.status).to.equal(422);\n//verification for messagae\nexpect(res.response.text).to.contain(prop.error_422_statusNotOnGoing);",
              "err": {},
              "uuid": "3c841030-9627-4852-8003-31fd48f5efb0",
              "parentUUID": "c886f003-5456-4a90-9aae-3559d2d0ee3b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should give an error when status is not on going, current status: Cancelled",
              "fullTitle": "Complete order should give an error when status is not on going, current status: Cancelled",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await testHelper.cancelOrder(orderId);\nvar res = await testHelper.completeOrder(orderId);\n//verification for status code\nexpect(res.status).to.equal(422);\n//verification for messagae\nexpect(res.response.text).to.contain(prop.error_422_statusNotOnGoing);",
              "err": {},
              "uuid": "472f780a-1c77-419a-8f20-7c2b7f215ee0",
              "parentUUID": "c886f003-5456-4a90-9aae-3559d2d0ee3b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should give an error when status is not on going, current status: Completed",
              "fullTitle": "Complete order should give an error when status is not on going, current status: Completed",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await testHelper.takeOrder(orderId);\nawait testHelper.completeOrder(orderId);\nvar res = await testHelper.completeOrder(orderId);\n//verification for status code\nexpect(res.status).to.equal(422);\n//verification for messagae\nexpect(res.response.text).to.contain(prop.error_422_statusNotOnGoing);",
              "err": {},
              "uuid": "0f43a042-395b-4995-9f97-2ac4a60ad00e",
              "parentUUID": "c886f003-5456-4a90-9aae-3559d2d0ee3b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should give an error when passing invalid order id",
              "fullTitle": "Complete order should give an error when passing invalid order id",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var res = await testHelper.completeOrder(orderId + 100);\n//verification for status code\nexpect(res.status).to.equal(404);\n//verification for message\nexpect(res.response.text).to.contain(prop.error_404_orderNotFound);",
              "err": {},
              "uuid": "38b15955-a9be-497c-abf1-c75ed16ae61a",
              "parentUUID": "c886f003-5456-4a90-9aae-3559d2d0ee3b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e0abe60d-816c-4dbb-9c0d-fbecff3f6b53",
            "3c841030-9627-4852-8003-31fd48f5efb0",
            "472f780a-1c77-419a-8f20-7c2b7f215ee0",
            "0f43a042-395b-4995-9f97-2ac4a60ad00e",
            "38b15955-a9be-497c-abf1-c75ed16ae61a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 98,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "ed48304c-6559-4eb5-816d-42c0e0873dea",
          "title": "Get order",
          "fullFile": "D:\\workspaceVScode\\RestfulAPITestProject\\test\\testScripts\\getOrder.spec.js",
          "file": "\\test\\testScripts\\getOrder.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Get order \"before each\" hook",
              "timedOut": false,
              "duration": 666,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let numberOfStops = 3;\nlet jsonData = await utilHelper.generateOrderPayload(numberOfStops);\nvar res = await testHelper.placeOrder(jsonData);\norderId = res.body.id;",
              "err": {},
              "uuid": "f732bfe7-6cbe-4458-8fdc-5832e92fca35",
              "parentUUID": "ed48304c-6559-4eb5-816d-42c0e0873dea",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should fetch order status: \"Assigning\" ",
              "fullTitle": "Get order should fetch order status: \"Assigning\" ",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var res = await testHelper.getOrder(orderId);\nexpect(res.status).to.equal(200);\n//verify json schema            \nexpect(res.body).to.be.jsonSchema(jsonSchema.jsonGetOrder);\nexpect(res.body.status).to.equal(prop.status_assigning);",
              "err": {},
              "uuid": "17b45864-4611-4d2e-82c5-4fe848709a1d",
              "parentUUID": "ed48304c-6559-4eb5-816d-42c0e0873dea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch order status: \"Ongoing\" ",
              "fullTitle": "Get order should fetch order status: \"Ongoing\" ",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await testHelper.takeOrder(orderId);\nvar res = await testHelper.getOrder(orderId);\nexpect(res.status).to.equal(200);\n//verify json schema            \nexpect(res.body).to.be.jsonSchema(jsonSchema.jsonGetOrder);\nexpect(res.body.status).to.equal(prop.status_ongoing);",
              "err": {},
              "uuid": "7f79fa0b-7319-405b-8841-738f37fa9df7",
              "parentUUID": "ed48304c-6559-4eb5-816d-42c0e0873dea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch order status: \"Cancelled\" ",
              "fullTitle": "Get order should fetch order status: \"Cancelled\" ",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await testHelper.takeOrder(orderId);\nawait testHelper.cancelOrder(orderId);\nvar res = await testHelper.getOrder(orderId);\nexpect(res.status).to.equal(200);\n//verify json schema            \nexpect(res.body).to.be.jsonSchema(jsonSchema.jsonGetOrder);\nexpect(res.body.status).to.equal(prop.status_canceled);",
              "err": {},
              "uuid": "181bff21-8d7c-41a8-9e40-77ac29770ae6",
              "parentUUID": "ed48304c-6559-4eb5-816d-42c0e0873dea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch order status: \"Completed\" ",
              "fullTitle": "Get order should fetch order status: \"Completed\" ",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await testHelper.takeOrder(orderId);\nawait testHelper.completeOrder(orderId);\nvar res = await testHelper.getOrder(orderId);\nexpect(res.status).to.equal(200);\n//verify json schema            \nexpect(res.body).to.be.jsonSchema(jsonSchema.jsonGetOrder);\nexpect(res.body.status).to.equal(prop.status_completed);",
              "err": {},
              "uuid": "3837869b-87e9-405c-aac8-74f8e129f20c",
              "parentUUID": "ed48304c-6559-4eb5-816d-42c0e0873dea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should give an error when passing invalid order id",
              "fullTitle": "Get order should give an error when passing invalid order id",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var res = await testHelper.getOrder(orderId + 100);\nexpect(res.status).to.equal(404);\nexpect(res.response.text).to.contain(prop.error_404_orderNotFound);",
              "err": {},
              "uuid": "9457b535-ed8f-4609-bca4-06bff424fbae",
              "parentUUID": "ed48304c-6559-4eb5-816d-42c0e0873dea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "17b45864-4611-4d2e-82c5-4fe848709a1d",
            "7f79fa0b-7319-405b-8841-738f37fa9df7",
            "181bff21-8d7c-41a8-9e40-77ac29770ae6",
            "3837869b-87e9-405c-aac8-74f8e129f20c",
            "9457b535-ed8f-4609-bca4-06bff424fbae"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 101,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "8e7579e6-af54-4079-8c79-bf45d3f821c6",
          "title": "Place order",
          "fullFile": "D:\\workspaceVScode\\RestfulAPITestProject\\test\\testScripts\\placeOrder.spec.js",
          "file": "\\test\\testScripts\\placeOrder.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should place a new order with two stops",
              "fullTitle": "Place order should place a new order with two stops",
              "timedOut": false,
              "duration": 320,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let numberOfStops = 2;\nlet jsonData = await utilHelper.generateOrderPayload(numberOfStops);\nvar res = await testHelper.placeOrder(jsonData);\ntestHelper.verifyPostOrder(res);",
              "err": {},
              "uuid": "f0f30344-1bc8-474f-8071-75b57c3aa659",
              "parentUUID": "8e7579e6-af54-4079-8c79-bf45d3f821c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should place a new order with three stops",
              "fullTitle": "Place order should place a new order with three stops",
              "timedOut": false,
              "duration": 466,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let numberOfStops = 3;\nlet jsonData = await utilHelper.generateOrderPayload(numberOfStops);\nvar res = await testHelper.placeOrder(jsonData);\ntestHelper.verifyPostOrder(res);",
              "err": {},
              "uuid": "96a3dd5a-06f9-49db-b9c1-1fe332a03a08",
              "parentUUID": "8e7579e6-af54-4079-8c79-bf45d3f821c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should place a new order with four stops",
              "fullTitle": "Place order should place a new order with four stops",
              "timedOut": false,
              "duration": 1818,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let numberOfStops = 4;\nlet jsonData = await utilHelper.generateOrderPayload(numberOfStops);\nvar res = await testHelper.placeOrder(jsonData);\ntestHelper.verifyPostOrder(res);",
              "err": {},
              "uuid": "1e3197d3-41ce-49f0-8612-286d4b8761a3",
              "parentUUID": "8e7579e6-af54-4079-8c79-bf45d3f821c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should place a new order containing two stops with future date",
              "fullTitle": "Place order should place a new order containing two stops with future date",
              "timedOut": false,
              "duration": 439,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let numberOfStops = 2;\nlet jsonData = await utilHelper.generateOrderPayload(numberOfStops, utilHelper.formatDateTime(\"future\", \"day\"));\nvar res = await testHelper.placeOrder(jsonData);\ntestHelper.verifyPostOrder(res);",
              "err": {},
              "uuid": "8c8cb8b3-f213-4719-aa85-1469a86734db",
              "parentUUID": "8e7579e6-af54-4079-8c79-bf45d3f821c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should place a new order containing three stops with future date and late night",
              "fullTitle": "Place order should place a new order containing three stops with future date and late night",
              "timedOut": false,
              "duration": 259,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let numberOfStops = 3;\nlet jsonData = await utilHelper.generateOrderPayload(numberOfStops, utilHelper.formatDateTime(\"future\", \"night\"));\nvar res = await testHelper.placeOrder(jsonData);\ntestHelper.verifyPostOrder(res);",
              "err": {},
              "uuid": "f6d1f374-9542-4f2a-85f3-548e83ba0739",
              "parentUUID": "8e7579e6-af54-4079-8c79-bf45d3f821c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should place a new order containing four stops with future date and late night",
              "fullTitle": "Place order should place a new order containing four stops with future date and late night",
              "timedOut": false,
              "duration": 475,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let numberOfStops = 4;\nlet jsonData = await utilHelper.generateOrderPayload(numberOfStops, utilHelper.formatDateTime(\"future\", \"night\"));\nvar res = await testHelper.placeOrder(jsonData);\ntestHelper.verifyPostOrder(res);",
              "err": {},
              "uuid": "a2dfcfc4-372f-40a1-8134-b703b601cdbd",
              "parentUUID": "8e7579e6-af54-4079-8c79-bf45d3f821c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not place an order and give error if payload contains only one stop",
              "fullTitle": "Place order should not place an order and give error if payload contains only one stop",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let numberOfStops = 1;\nlet jsonData = await utilHelper.generateOrderPayload(numberOfStops);\nvar res = await testHelper.placeOrder(jsonData);\n//verifying the status code\nexpect(res.status).to.equal(400);\n//verifying the message body\nexpect(res.response.text).to.contain(prop.error_400_errorInStopsField);",
              "err": {},
              "uuid": "f8eef3f7-4aee-4bc5-9a11-15eec86aefae",
              "parentUUID": "8e7579e6-af54-4079-8c79-bf45d3f821c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not place an order and give error for past date",
              "fullTitle": "Place order should not place an order and give error for past date",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let numberOfStops = 3;\nlet jsonData = await utilHelper.generateOrderPayload(numberOfStops, utilHelper.formatDateTime(\"past\"));\nvar res = await testHelper.placeOrder(jsonData);\n//verifying the status code\nexpect(res.status).to.equal(400);\n//verifying the message body\nexpect(res.response.text).to.contain(prop.error_400_pastOrder);",
              "err": {},
              "uuid": "bc79fe4a-90ba-47a5-9e46-d6e1b039b094",
              "parentUUID": "8e7579e6-af54-4079-8c79-bf45d3f821c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not place an order and give error for invalid lat/lng",
              "fullTitle": "Place order should not place an order and give error for invalid lat/lng",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let numberOfStops = 3;\nlet jsonData = await utilHelper.generateInvalidLocationOrderPayload(numberOfStops);\n\nvar res = await testHelper.placeOrder(jsonData);\n//verifying the status code\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "57b822d4-0bcb-40db-bb84-4d6888760e32",
              "parentUUID": "8e7579e6-af54-4079-8c79-bf45d3f821c6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f0f30344-1bc8-474f-8071-75b57c3aa659",
            "96a3dd5a-06f9-49db-b9c1-1fe332a03a08",
            "1e3197d3-41ce-49f0-8612-286d4b8761a3",
            "8c8cb8b3-f213-4719-aa85-1469a86734db",
            "f6d1f374-9542-4f2a-85f3-548e83ba0739",
            "a2dfcfc4-372f-40a1-8134-b703b601cdbd",
            "f8eef3f7-4aee-4bc5-9a11-15eec86aefae",
            "bc79fe4a-90ba-47a5-9e46-d6e1b039b094",
            "57b822d4-0bcb-40db-bb84-4d6888760e32"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3792,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "b29751f4-58d1-4f71-b400-cef8cca8ce76",
          "title": "Take order",
          "fullFile": "D:\\workspaceVScode\\RestfulAPITestProject\\test\\testScripts\\takeOrder.spec.js",
          "file": "\\test\\testScripts\\takeOrder.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Take order \"before each\" hook",
              "timedOut": false,
              "duration": 279,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let numberOfStops = 3;\nlet jsonData = await utilHelper.generateOrderPayload(numberOfStops);\nvar res = await testHelper.placeOrder(jsonData);\norderId = res.body.id;",
              "err": {},
              "uuid": "3ba57623-bc66-4609-9ec4-24938df09825",
              "parentUUID": "b29751f4-58d1-4f71-b400-cef8cca8ce76",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should take order with valid id",
              "fullTitle": "Take order should take order with valid id",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var res = await testHelper.takeOrder(orderId);\nexpect(res.status).to.equal(200);\n//verify json schema            \nexpect(res.body).to.be.jsonSchema(jsonSchema.jsonTakeOrder);",
              "err": {},
              "uuid": "b9dab2f3-6442-4880-b7fd-af55216894a7",
              "parentUUID": "b29751f4-58d1-4f71-b400-cef8cca8ce76",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not take order that is already in ongoing status",
              "fullTitle": "Take order should not take order that is already in ongoing status",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await testHelper.takeOrder(orderId);\nvar res = await testHelper.takeOrder(orderId);\n//verify status code    \nexpect(res.status).to.equal(422);\n//verification for message\nexpect(res.response.text).to.contain(prop.error_422_statusNotOnAssigning);",
              "err": {},
              "uuid": "95c416a1-2c3d-4a64-81be-2a21f3ce9083",
              "parentUUID": "b29751f4-58d1-4f71-b400-cef8cca8ce76",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not take order that is already in completed status",
              "fullTitle": "Take order should not take order that is already in completed status",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await testHelper.takeOrder(orderId);\nawait testHelper.completeOrder(orderId);\nvar res = await testHelper.takeOrder(orderId);\n//verify status code    \nexpect(res.status).to.equal(422);\n//verification for message\nexpect(res.response.text).to.contain(prop.error_422_statusNotOnAssigning);",
              "err": {},
              "uuid": "64033376-2a57-4ecb-8589-1c693dc63772",
              "parentUUID": "b29751f4-58d1-4f71-b400-cef8cca8ce76",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not take order that is already in cancelled status",
              "fullTitle": "Take order should not take order that is already in cancelled status",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await testHelper.takeOrder(orderId);\nawait testHelper.cancelOrder(orderId);\nvar res = await testHelper.takeOrder(orderId);\n//verify status code    \nexpect(res.status).to.equal(422);\n//verification for message\nexpect(res.response.text).to.contain(prop.error_422_statusNotOnAssigning)",
              "err": {},
              "uuid": "150092af-0e7f-4a55-b558-e7d9b26bbe68",
              "parentUUID": "b29751f4-58d1-4f71-b400-cef8cca8ce76",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should give an error when passing invalid order id",
              "fullTitle": "Take order should give an error when passing invalid order id",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var res = await testHelper.takeOrder(orderId + 100);\n//verification for status code\nexpect(res.status).to.equal(404);\n//verification for message\nexpect(res.response.text).to.contain(prop.error_404_orderNotFound);",
              "err": {},
              "uuid": "16d065e6-97ad-4d8e-a75a-9dacf57d8158",
              "parentUUID": "b29751f4-58d1-4f71-b400-cef8cca8ce76",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b9dab2f3-6442-4880-b7fd-af55216894a7",
            "95c416a1-2c3d-4a64-81be-2a21f3ce9083",
            "64033376-2a57-4ecb-8589-1c693dc63772",
            "150092af-0e7f-4a55-b558-e7d9b26bbe68",
            "16d065e6-97ad-4d8e-a75a-9dacf57d8158"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 87,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 15000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": null,
      "version": "4.0.1"
    }
  }
}